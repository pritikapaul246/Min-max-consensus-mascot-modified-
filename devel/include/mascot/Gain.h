// Generated by gencpp from file mascot/Gain.msg
// DO NOT EDIT!


#ifndef MASCOT_MESSAGE_GAIN_H
#define MASCOT_MESSAGE_GAIN_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mascot
{
template <class ContainerAllocator>
struct Gain_
{
  typedef Gain_<ContainerAllocator> Type;

  Gain_()
    : k_p(0.0)
    , k_d(0.0)
    , k_i(0.0)  {
    }
  Gain_(const ContainerAllocator& _alloc)
    : k_p(0.0)
    , k_d(0.0)
    , k_i(0.0)  {
  (void)_alloc;
    }



   typedef float _k_p_type;
  _k_p_type k_p;

   typedef float _k_d_type;
  _k_d_type k_d;

   typedef float _k_i_type;
  _k_i_type k_i;





  typedef boost::shared_ptr< ::mascot::Gain_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mascot::Gain_<ContainerAllocator> const> ConstPtr;

}; // struct Gain_

typedef ::mascot::Gain_<std::allocator<void> > Gain;

typedef boost::shared_ptr< ::mascot::Gain > GainPtr;
typedef boost::shared_ptr< ::mascot::Gain const> GainConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mascot::Gain_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mascot::Gain_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mascot::Gain_<ContainerAllocator1> & lhs, const ::mascot::Gain_<ContainerAllocator2> & rhs)
{
  return lhs.k_p == rhs.k_p &&
    lhs.k_d == rhs.k_d &&
    lhs.k_i == rhs.k_i;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mascot::Gain_<ContainerAllocator1> & lhs, const ::mascot::Gain_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mascot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mascot::Gain_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mascot::Gain_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mascot::Gain_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mascot::Gain_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mascot::Gain_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mascot::Gain_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mascot::Gain_<ContainerAllocator> >
{
  static const char* value()
  {
    return "42218fccfcf87f05cc02314f682ea6ae";
  }

  static const char* value(const ::mascot::Gain_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x42218fccfcf87f05ULL;
  static const uint64_t static_value2 = 0xcc02314f682ea6aeULL;
};

template<class ContainerAllocator>
struct DataType< ::mascot::Gain_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mascot/Gain";
  }

  static const char* value(const ::mascot::Gain_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mascot::Gain_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 k_p\n"
"float32 k_d\n"
"float32 k_i\n"
;
  }

  static const char* value(const ::mascot::Gain_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mascot::Gain_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.k_p);
      stream.next(m.k_d);
      stream.next(m.k_i);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Gain_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mascot::Gain_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mascot::Gain_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "k_p: ";
    Printer<float>::stream(s, indent + "  ", v.k_p);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "k_d: ";
    Printer<float>::stream(s, indent + "  ", v.k_d);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "k_i: ";
    Printer<float>::stream(s, indent + "  ", v.k_i);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MASCOT_MESSAGE_GAIN_H
