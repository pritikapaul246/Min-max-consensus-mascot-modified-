// Generated by gencpp from file mascot/Force.msg
// DO NOT EDIT!


#ifndef MASCOT_MESSAGE_FORCE_H
#define MASCOT_MESSAGE_FORCE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>

namespace mascot
{
template <class ContainerAllocator>
struct Force_
{
  typedef Force_<ContainerAllocator> Type;

  Force_()
    : force()  {
    }
  Force_(const ContainerAllocator& _alloc)
    : force(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _force_type;
  _force_type force;





  typedef boost::shared_ptr< ::mascot::Force_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mascot::Force_<ContainerAllocator> const> ConstPtr;

}; // struct Force_

typedef ::mascot::Force_<std::allocator<void> > Force;

typedef boost::shared_ptr< ::mascot::Force > ForcePtr;
typedef boost::shared_ptr< ::mascot::Force const> ForceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mascot::Force_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mascot::Force_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mascot::Force_<ContainerAllocator1> & lhs, const ::mascot::Force_<ContainerAllocator2> & rhs)
{
  return lhs.force == rhs.force;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mascot::Force_<ContainerAllocator1> & lhs, const ::mascot::Force_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mascot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mascot::Force_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mascot::Force_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mascot::Force_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mascot::Force_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mascot::Force_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mascot::Force_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mascot::Force_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d2c6d945b64e1a5c23ef82706f0df5c7";
  }

  static const char* value(const ::mascot::Force_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd2c6d945b64e1a5cULL;
  static const uint64_t static_value2 = 0x23ef82706f0df5c7ULL;
};

template<class ContainerAllocator>
struct DataType< ::mascot::Force_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mascot/Force";
  }

  static const char* value(const ::mascot::Force_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mascot::Force_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Vector3  force\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::mascot::Force_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mascot::Force_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.force);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Force_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mascot::Force_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mascot::Force_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "force: ";
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.force);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MASCOT_MESSAGE_FORCE_H
